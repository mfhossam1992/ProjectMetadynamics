//
//  main.cpp
//  ProjectMetadynamics
//
//  Created by Hossam Farag on 12/7/19.
//  Copyright Â© 2019 Hossam Farag. All rights reserved.
//

#include <iostream>
#include"Init.hpp"
#include "MD.hpp"

using namespace std;

// Input Parameters

// ************* System ************* //

// mass
double M = 48.0;
// Number of Particles Per dimension
int Ncube = 3 ;
// Box Side Length
//double L = 4;
double L = 1.587401052 * Ncube; // rho = 1.0 for FCC
//double L = 1.54 * Ncube;// rho = 1.09 for FCC
//double L = 1.4938 * Ncube; // corresponding to rho = 1.2 for FCC
// Initial Temperature
double T0 = 2;
// System Temperature
double Ta = 0.7;

// ************* MD ************* //
//Equilibration
// Phase 1 (MELT IT)
double equil1_Temp = 3;
double equil1_steps = 10000;
string equil1_thermo_file = "equil1_thermo.txt";
string equil1_traj_file = "equil1_md.xyz";
// Phase 2 (Thermostat it)
double equil2_Temp = 2.7;
double equil2_steps = 20000;
string equil2_thermo_file = "equil2_thermo.txt";
string equil2_traj_file = "equil2_md.xyz";
//END_OF_Equilibration
// cutoff radius
//double rc = L/2;//
double rc = 3.5; // consistent with PRE paper
//Anderson Thermostate
bool anderson = true;
double eta = 0.3125;
// Output Atomic Trajcetory filename
string fileName = "thermo.txt";
string trajFileName = "md.xyz";
// total number of time steps
int steps = 6000000;
// time step size
double h = 0.032;//

// ************* MeTaD ************* //

//Gaussian
double meta_w = 1; // height
double meta_sigma = 0.025; // width of Q_6
double meta_sigma_2 = 10; // width of potential energy // put it to zero if not want to activate it
// Maximum Number of Gaussian
int meta_max = 20000;
// frequency
int meta_tau = 300;
// cutoff radius for n.n. in Q6
double meta_rc = 1.2 * pow(2, 1/6); // 1.2 * r_min in LJ
// perform or not mtd
bool mtd = true;

// ** end Input Parameters ** //

int main(int argc, const char * argv[]) {
    
    // Initiate a box of Ar atoms with the desired number of atoms, structure and Temperature
    Init * init = new Init("fcc",Ncube,L,T0,M);
    //Initiate structure from a .xyz file generated by packmol
    //Init * init = new Init("file","/Users/hossamfarag/Desktop/Meta_RUNS2/PACKMOL_STUFF/liq_argon.xyz",0,0.1,M);
    //Printing to screen the Parameters of the object init I created
    auto N = init->getN();
    cout<< "N = " << N << endl;
    auto T = init->getT();
    cout << "T0 = " << T << endl;
    cout << "Ta = " << Ta << endl;
    cout << "BOX LENGTH:"<< L <<endl;
    auto R = init->getPosition();
    cout << "\n Positions\n" << endl;
    for (int i_atom = 0; i_atom < N; ++i_atom) {
        cout << R[i_atom][0] << " , " << R[i_atom][1] << " , " << R[i_atom][2] << endl;

    }
    auto V = init->getVelocity();
    cout << "\n Velocities\n" << endl;
    for (int i_atom = 0; i_atom < N; ++i_atom) {
        cout << V[i_atom][0] << " , " << V[i_atom][1] << " , " << V[i_atom][2] << endl;

    }
    //END of Printing Section
    //Equilibration Section1_GET IT TO MELT
    MD * equilib1 = new MD(init, anderson, equil1_Temp, eta, false, rc, meta_rc, h, equil1_thermo_file, equil1_steps, equil1_traj_file );
    //Printing to screen the Parameters of the object equilib I created
    N = equilib1->getN();
    cout<< "N = " << N << endl;
    double L_ = equilib1->getL();
    cout << "BOX LENGTH:"<< L_ <<endl;
    R = equilib1->getPosition();
    cout << "\n Positions\n" << endl;
    for (int i_atom = 0; i_atom < N; ++i_atom) {
        cout << R[i_atom][0] << " , " << R[i_atom][1] << " , " << R[i_atom][2] << endl;

    }
    V = equilib1->getVelocity();
    cout << "\n Velocities\n" << endl;
    for (int i_atom = 0; i_atom < N; ++i_atom) {
        cout << V[i_atom][0] << " , " << V[i_atom][1] << " , " << V[i_atom][2] << endl;

    }
    //END of Printing Section
    equilib1->equilibrate(); // same as simulate but without the thermostate fixing thing
    //End of Equilibration section1
    //Equilibration Section2_Equilibrate it at desired temperature (Thermostat it) in steps
    MD * equilib2 = new MD(equilib1, anderson, equil2_Temp, eta, false, rc, meta_rc, h, equil2_thermo_file, equil2_steps, equil2_traj_file );
    //Printing to screen the Parameters of the object equilib I created
    N = equilib2->getN();
    cout<< "N = " << N << endl;
    L_ = equilib2->getL();
    cout << "BOX LENGTH:"<< L_ <<endl;
    R = equilib2->getPosition();
    cout << "\n Positions\n" << endl;
    for (int i_atom = 0; i_atom < N; ++i_atom) {
        cout << R[i_atom][0] << " , " << R[i_atom][1] << " , " << R[i_atom][2] << endl;

    }
    V = equilib2->getVelocity();
    cout << "\n Velocities\n" << endl;
    for (int i_atom = 0; i_atom < N; ++i_atom) {
        cout << V[i_atom][0] << " , " << V[i_atom][1] << " , " << V[i_atom][2] << endl;

    }
    //END of Printing Section
    delete equilib1;
    double T_iter = equil2_Temp;
    double cooling_T_per_step = 0.1;
    for (int i_T = 0; i_T < int((equil2_Temp-Ta)/cooling_T_per_step); ++i_T) {
        cout<< "Equilibration_Step_no = "<< i_T<<endl<<"Equilibration_Temperature = "<< T_iter<<endl;
        equilib2 -> setTa(T_iter);
        equilib2->equilibrate();
        T_iter -= cooling_T_per_step;
    }
    //End of Equilibration section2
    if (mtd == false) {
        MD md(equilib2, anderson, Ta, eta, mtd, rc, meta_rc, h, fileName, steps,trajFileName );
        delete equilib2;
        md.simulate();

    }
    else {
        MD md(equilib2, anderson, Ta, eta, mtd, meta_w, meta_sigma, meta_sigma_2,meta_max, meta_tau,rc, meta_rc, h, fileName, steps,trajFileName );
        delete equilib2;
        md.simulate();

    }

    return 0;
}
